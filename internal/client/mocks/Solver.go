// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	message "github.com/vladimirpekarski/wordofwisdom/internal/message"
)

// Solver is an autogenerated mock type for the Solver type
type Solver struct {
	mock.Mock
}

// Solve provides a mock function with given fields: ctx, ch
func (_m *Solver) Solve(ctx context.Context, ch message.Challenge) (message.Solution, error) {
	ret := _m.Called(ctx, ch)

	var r0 message.Solution
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, message.Challenge) (message.Solution, error)); ok {
		return rf(ctx, ch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, message.Challenge) message.Solution); ok {
		r0 = rf(ctx, ch)
	} else {
		r0 = ret.Get(0).(message.Solution)
	}

	if rf, ok := ret.Get(1).(func(context.Context, message.Challenge) error); ok {
		r1 = rf(ctx, ch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSolver interface {
	mock.TestingT
	Cleanup(func())
}

// NewSolver creates a new instance of Solver. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSolver(t mockConstructorTestingTNewSolver) *Solver {
	mock := &Solver{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
